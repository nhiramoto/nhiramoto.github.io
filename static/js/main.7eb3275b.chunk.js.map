{"version":3,"sources":["components/IconizedLink/IconizedLink.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faGithub","faEnvelope","IconizedLink","icon","style","this","props","color","backgroundColor","react_default","a","createElement","className","href","link","rel","target","react_fontawesome_index_es","Component","About","components_IconizedLink_IconizedLink","App","components_About_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAOAA,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,SAyCGC,mLArCP,IAAIC,EAAMC,EAsBV,MArBwB,WAApBC,KAAKC,MAAMH,KACXA,EAAOH,IACoB,UAApBK,KAAKC,MAAMH,OAClBA,EAAOF,KAEc,SAArBI,KAAKC,MAAMC,MACXH,EAAQ,CACJI,gBAAiB,UACjBD,MAAO,WAEiB,SAArBF,KAAKC,MAAMC,MAClBH,EAAQ,CACJI,gBAAiB,OACjBD,MAAO,WAEiB,QAArBF,KAAKC,MAAMC,QAClBH,EAAQ,CACJI,gBAAiB,UACjBD,MAAO,YAIXE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAMR,KAAKC,MAAMQ,KAAMC,IAAI,WAAWC,OAAO,UAC5CP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOR,MAAOA,GAC1BK,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBd,KAAMA,EAAMS,UAAU,cAE3CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOR,MAAOA,GACzBC,KAAKC,MAAMQ,eA/BTI,aCeZC,mLAnBP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,KAAkCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,aAClCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qDACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACS,EAAD,CAAcjB,KAAK,SAASI,MAAM,OAAOO,KAAK,kCAC9CL,EAAAC,EAAAC,cAACS,EAAD,CAAcjB,KAAK,QAAQI,MAAM,MAAMO,KAAK,kDAXxDI,aCULG,mLARP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACW,EAAD,cAJEJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7eb3275b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './IconizedLink.sass';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faGithub);\nlibrary.add(faEnvelope);\n\nclass IconizedLink extends Component {\n    render() {\n        let icon, style;\n        if (this.props.icon === \"github\") {\n            icon = faGithub;\n        } else if (this.props.icon === \"email\") {\n            icon = faEnvelope;\n        }\n        if (this.props.color === 'blue') {\n            style = {\n                backgroundColor: '#004fb0',\n                color: '#EFEFEF'\n            }\n        } else if (this.props.color === \"cyan\") {\n            style = {\n                backgroundColor: 'cyan',\n                color: '#EFEFEF'\n            }\n        } else if (this.props.color === \"red\") {\n            style = {\n                backgroundColor: '#55557f',\n                color: '#EFEFEF'\n            }\n        }\n        return (\n            <div className=\"IconizedLink\" >\n                <a href={this.props.link} rel=\"noopener\" target=\"_blank\">\n                    <span className=\"icon\" style={style}>\n                        <FontAwesomeIcon icon={icon} className=\"svg-icon\" />\n                    </span>\n                    <span className=\"link\" style={style}>\n                        {this.props.link}\n                    </span>\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default IconizedLink;","import React, { Component } from 'react';\nimport './About.sass';\nimport IconizedLink from '../IconizedLink/IconizedLink';\n\nclass About extends Component {\n    render() {\n        return (\n            <div className=\"About\">\n                <div className=\"About-container\">\n                    <div className=\"info-container\">\n                        <div className=\"info\">\n                            <div className=\"name hoverable\">nh<span className=\"second-name\">toshiaki</span></div>\n                            <div className=\"desc hoverable\">Computer Scientist, Programmer, Linux enthusiast.</div>\n                            <div className=\"links\">\n                                <IconizedLink icon=\"github\" color=\"blue\" link=\"https://github.com/nhtoshiaki\" />\n                                <IconizedLink icon=\"email\" color=\"red\" link=\"mailto:nicolau.hiramoto@gmail.com\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default About;\n\n","import React, { Component } from 'react';\nimport './App.sass';\nimport About from './components/About/About';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <About />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}